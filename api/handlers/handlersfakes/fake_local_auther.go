// Code generated by counterfeiter. DO NOT EDIT.
package handlersfakes

import (
	"sync"

	"github.com/kieron-pivotal/menu-planner-app/handlers"
)

type FakeLocalAuther struct {
	LocalAuthStub        func(string, string) (string, error)
	localAuthMutex       sync.RWMutex
	localAuthArgsForCall []struct {
		arg1 string
		arg2 string
	}
	localAuthReturns struct {
		result1 string
		result2 error
	}
	localAuthReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeLocalAuther) LocalAuth(arg1 string, arg2 string) (string, error) {
	fake.localAuthMutex.Lock()
	ret, specificReturn := fake.localAuthReturnsOnCall[len(fake.localAuthArgsForCall)]
	fake.localAuthArgsForCall = append(fake.localAuthArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("LocalAuth", []interface{}{arg1, arg2})
	fake.localAuthMutex.Unlock()
	if fake.LocalAuthStub != nil {
		return fake.LocalAuthStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.localAuthReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeLocalAuther) LocalAuthCallCount() int {
	fake.localAuthMutex.RLock()
	defer fake.localAuthMutex.RUnlock()
	return len(fake.localAuthArgsForCall)
}

func (fake *FakeLocalAuther) LocalAuthCalls(stub func(string, string) (string, error)) {
	fake.localAuthMutex.Lock()
	defer fake.localAuthMutex.Unlock()
	fake.LocalAuthStub = stub
}

func (fake *FakeLocalAuther) LocalAuthArgsForCall(i int) (string, string) {
	fake.localAuthMutex.RLock()
	defer fake.localAuthMutex.RUnlock()
	argsForCall := fake.localAuthArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeLocalAuther) LocalAuthReturns(result1 string, result2 error) {
	fake.localAuthMutex.Lock()
	defer fake.localAuthMutex.Unlock()
	fake.LocalAuthStub = nil
	fake.localAuthReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLocalAuther) LocalAuthReturnsOnCall(i int, result1 string, result2 error) {
	fake.localAuthMutex.Lock()
	defer fake.localAuthMutex.Unlock()
	fake.LocalAuthStub = nil
	if fake.localAuthReturnsOnCall == nil {
		fake.localAuthReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.localAuthReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeLocalAuther) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.localAuthMutex.RLock()
	defer fake.localAuthMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeLocalAuther) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ handlers.LocalAuther = new(FakeLocalAuther)
