// Code generated by counterfeiter. DO NOT EDIT.
package routingfakes

import (
	"net/http"
	"sync"

	"github.com/kieron-pivotal/menu-planner-app/routing"
)

type FakeSessionManager struct {
	SessionMiddlewareStub        func(http.Handler) http.Handler
	sessionMiddlewareMutex       sync.RWMutex
	sessionMiddlewareArgsForCall []struct {
		arg1 http.Handler
	}
	sessionMiddlewareReturns struct {
		result1 http.Handler
	}
	sessionMiddlewareReturnsOnCall map[int]struct {
		result1 http.Handler
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSessionManager) SessionMiddleware(arg1 http.Handler) http.Handler {
	fake.sessionMiddlewareMutex.Lock()
	ret, specificReturn := fake.sessionMiddlewareReturnsOnCall[len(fake.sessionMiddlewareArgsForCall)]
	fake.sessionMiddlewareArgsForCall = append(fake.sessionMiddlewareArgsForCall, struct {
		arg1 http.Handler
	}{arg1})
	fake.recordInvocation("SessionMiddleware", []interface{}{arg1})
	fake.sessionMiddlewareMutex.Unlock()
	if fake.SessionMiddlewareStub != nil {
		return fake.SessionMiddlewareStub(arg1)
	}
	if specificReturn {
		return ret.result1
	}
	fakeReturns := fake.sessionMiddlewareReturns
	return fakeReturns.result1
}

func (fake *FakeSessionManager) SessionMiddlewareCallCount() int {
	fake.sessionMiddlewareMutex.RLock()
	defer fake.sessionMiddlewareMutex.RUnlock()
	return len(fake.sessionMiddlewareArgsForCall)
}

func (fake *FakeSessionManager) SessionMiddlewareCalls(stub func(http.Handler) http.Handler) {
	fake.sessionMiddlewareMutex.Lock()
	defer fake.sessionMiddlewareMutex.Unlock()
	fake.SessionMiddlewareStub = stub
}

func (fake *FakeSessionManager) SessionMiddlewareArgsForCall(i int) http.Handler {
	fake.sessionMiddlewareMutex.RLock()
	defer fake.sessionMiddlewareMutex.RUnlock()
	argsForCall := fake.sessionMiddlewareArgsForCall[i]
	return argsForCall.arg1
}

func (fake *FakeSessionManager) SessionMiddlewareReturns(result1 http.Handler) {
	fake.sessionMiddlewareMutex.Lock()
	defer fake.sessionMiddlewareMutex.Unlock()
	fake.SessionMiddlewareStub = nil
	fake.sessionMiddlewareReturns = struct {
		result1 http.Handler
	}{result1}
}

func (fake *FakeSessionManager) SessionMiddlewareReturnsOnCall(i int, result1 http.Handler) {
	fake.sessionMiddlewareMutex.Lock()
	defer fake.sessionMiddlewareMutex.Unlock()
	fake.SessionMiddlewareStub = nil
	if fake.sessionMiddlewareReturnsOnCall == nil {
		fake.sessionMiddlewareReturnsOnCall = make(map[int]struct {
			result1 http.Handler
		})
	}
	fake.sessionMiddlewareReturnsOnCall[i] = struct {
		result1 http.Handler
	}{result1}
}

func (fake *FakeSessionManager) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.sessionMiddlewareMutex.RLock()
	defer fake.sessionMiddlewareMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSessionManager) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ routing.SessionManager = new(FakeSessionManager)
