// Code generated by counterfeiter. DO NOT EDIT.
package authfakes

import (
	"sync"

	"github.com/kieron-pivotal/menu-planner-app/auth"
)

type FakeJWTGenerator struct {
	GenerateTokenStub        func(string, string) (string, error)
	generateTokenMutex       sync.RWMutex
	generateTokenArgsForCall []struct {
		arg1 string
		arg2 string
	}
	generateTokenReturns struct {
		result1 string
		result2 error
	}
	generateTokenReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeJWTGenerator) GenerateToken(arg1 string, arg2 string) (string, error) {
	fake.generateTokenMutex.Lock()
	ret, specificReturn := fake.generateTokenReturnsOnCall[len(fake.generateTokenArgsForCall)]
	fake.generateTokenArgsForCall = append(fake.generateTokenArgsForCall, struct {
		arg1 string
		arg2 string
	}{arg1, arg2})
	fake.recordInvocation("GenerateToken", []interface{}{arg1, arg2})
	fake.generateTokenMutex.Unlock()
	if fake.GenerateTokenStub != nil {
		return fake.GenerateTokenStub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	fakeReturns := fake.generateTokenReturns
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeJWTGenerator) GenerateTokenCallCount() int {
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	return len(fake.generateTokenArgsForCall)
}

func (fake *FakeJWTGenerator) GenerateTokenCalls(stub func(string, string) (string, error)) {
	fake.generateTokenMutex.Lock()
	defer fake.generateTokenMutex.Unlock()
	fake.GenerateTokenStub = stub
}

func (fake *FakeJWTGenerator) GenerateTokenArgsForCall(i int) (string, string) {
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	argsForCall := fake.generateTokenArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeJWTGenerator) GenerateTokenReturns(result1 string, result2 error) {
	fake.generateTokenMutex.Lock()
	defer fake.generateTokenMutex.Unlock()
	fake.GenerateTokenStub = nil
	fake.generateTokenReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTGenerator) GenerateTokenReturnsOnCall(i int, result1 string, result2 error) {
	fake.generateTokenMutex.Lock()
	defer fake.generateTokenMutex.Unlock()
	fake.GenerateTokenStub = nil
	if fake.generateTokenReturnsOnCall == nil {
		fake.generateTokenReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.generateTokenReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *FakeJWTGenerator) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.generateTokenMutex.RLock()
	defer fake.generateTokenMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeJWTGenerator) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ auth.JWTGenerator = new(FakeJWTGenerator)
